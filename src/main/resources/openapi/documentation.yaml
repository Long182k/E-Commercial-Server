openapi: "3.0.3"
info:
  title: "E-Commerce API"
  description: "API Documentation for E-Commerce System"
  version: "1.0.0"
servers:
  - url: http://localhost:8081
tags:
  - name: Authentication
    description: Authentication endpoints for user management
  - name: Products
    description: Product management endpoints
  - name: Categories
    description: Category management endpoints
  - name: Cart
    description: Shopping cart management endpoints
  - name: Orders
    description: Order management endpoints

  # Authentication endpoints
paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Missing required fields or invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Missing email or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/change-password:
    post:
      tags:
        - Authentication
      summary: Change user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - oldPassword
                - newPassword
              properties:
                email:
                  type: string
                  format: email
                oldPassword:
                  type: string
                  format: password
                newPassword:
                  type: string
                  format: password
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Current password is incorrect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset handling by email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        "200":
          description: Password reset email sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Email is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Failed to send reset email or internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/profile:
    put:
      tags:
        - Authentication
      summary: Update user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Product endpoints
  /products:
    post:
      tags:
        - Products
      summary: Create multiple products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ProductRequest"
      responses:
        "201":
          description: Products created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Failed to add products
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - Products
      summary: Get all products
      responses:
        "200":
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: No products found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Products
      summary: Update product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductRequest"
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Products
      summary: Delete product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /products/category/{categoryId}:
    get:
      tags:
        - Products
      summary: Get products by category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: No products found for this category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /products/best-sellers:
    get:
      tags:
        - Products
      summary: Get best selling products
      responses:
        "200":
          description: Best sellers retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Category endpoints
  /categories:
    post:
      tags:
        - Categories
      summary: Create categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CategoryRequest"
      responses:
        "201":
          description: Categories created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Failed to add categories
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - Categories
      summary: Get all categories
      responses:
        "200":
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: No categories found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /categories/{id}:
    get:
      tags:
        - Categories
      summary: Get category by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Category retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Categories
      summary: Update category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryRequest"
      responses:
        "200":
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Categories
      summary: Delete category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Category deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Cart endpoints
  /cart/{userId}:
    post:
      tags:
        - Cart
      summary: Add item to cart
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartItem"
      responses:
        "200":
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Failed to add item to cart
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - Cart
      summary: Get user's cart
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Cart items retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /cart/{userId}/{cartId}:
    put:
      tags:
        - Cart
      summary: Update cart item quantity
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: cartId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
      responses:
        "200":
          description: Cart item updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Failed to update cart item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Cart
      summary: Remove item from cart
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: cartId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Item removed from cart successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Failed to delete cart item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Order endpoints
  /orders/{userId}:
    post:
      tags:
        - Orders
      summary: Place order
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Address"
      responses:
        "200":
          description: Order placed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Failed to place order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - Orders
      summary: Get user's orders
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: No orders found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /orders/checkout/{userId}:
    get:
      tags:
        - Orders
      summary: Get checkout summary
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Checkout summary retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutResponse"
        "400":
          description: Failed to get checkout summary
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  parameters:
    idParam:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    userIdParam:
      name: userId
      in: path
      required: true
      schema:
        type: string
        format: uuid

  schemas:
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string

    SuccessResponse:
      type: object
      properties:
        msg:
          type: string
        data:
          type: object

    ProductRequest:
      type: object
      required:
        - title
        - price
        - description
        - categoryId
        - image
      properties:
        title:
          type: string
        price:
          type: number
          format: double
        description:
          type: string
        categoryId:
          type: integer
        image:
          type: string

    ProductResponse:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
        image:
          type: string
        categoryId:
          type: integer
        sellNumber:
          type: integer

    ProductsResponse:
      type: object
      properties:
        msg:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProductResponse"

    CategoryRequest:
      type: object
      required:
        - title
        - image
      properties:
        title:
          type: string
        image:
          type: string

    CategoryResponse:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        image:
          type: string

    CategoriesResponse:
      type: object
      properties:
        msg:
          type: string
          example: "Success"
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              title:
                type: string
              image:
                type: string

    CartItemRequest:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: integer
        quantity:
          type: integer

    CartItemResponse:
      type: object
      properties:
        id:
          type: integer
        productId:
          type: integer
        userId:
          type: integer
        price:
          type: number
          format: double
        imageUrl:
          type: string
        quantity:
          type: integer
        productName:
          type: string

    CartItemsResponse:
      type: object
      properties:
        msg:
          type: string
        data:
          type: array
          items:
            $ref: "#/components/schemas/CartItemResponse"

    AddressRequest:
      type: object
      required:
        - addressLine
        - city
        - state
        - postalCode
        - country
      properties:
        addressLine:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string

    OrderResponse:
      type: object
      properties:
        id:
          type: integer
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItemResponse"
        orderDate:
          type: string
        status:
          type: string
        totalAmount:
          type: number
          format: double
        userId:
          type: integer
        address:
          $ref: "#/components/schemas/AddressRequest"

    OrdersResponse:
      type: object
      properties:
        msg:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              items:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    orderId:
                      type: string
                      format: uuid
                    productId:
                      type: string
                      format: uuid
                    quantity:
                      type: integer
                    price:
                      type: number
                      format: double
                    productName:
                      type: string
              orderDate:
                type: string
              status:
                type: string
              totalAmount:
                type: number
                format: double
              userId:
                type: string
                format: uuid
              address:
                $ref: "#/components/schemas/AddressRequest"

    User:
      type: object
      required:
        - email
        - password
        - name
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        name:
          type: string

    UserResponse:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        name:
          type: string

    Address:
      type: object
      required:
        - addressLine
        - city
        - state
        - postalCode
        - country
      properties:
        addressLine:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string

    OrderItemResponse:
      type: object
      properties:
        id:
          type: integer
        orderId:
          type: integer
        productId:
          type: integer
        quantity:
          type: integer
        price:
          type: number
          format: double
        userId:
          type: integer
        productName:
          type: string

    Summary:
      type: object
      properties:
        discount:
          type: number
          format: double
        items:
          type: array
          items:
            $ref: "#/components/schemas/CartItemResponse"
        shipping:
          type: number
          format: double
        subtotal:
          type: number
          format: double
        tax:
          type: number
          format: double
        total:
          type: number
          format: double

    CheckoutResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Summary"
        msg:
          type: string

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
